# Lean 4 Advanced Proof Tactics

## omega Tactic

The `omega` tactic solves linear arithmetic goals over integers and natural numbers.

### Basic Usage
```lean4
example (x y : Nat) : x ≤ x + y := by omega

example (a b c : Int) (h1 : a < b) (h2 : b < c) : a < c := by omega

example (n : Nat) (h : n > 0) : n ≥ 1 := by omega
```

### System of Inequalities
```lean4
example (x y z : Nat) (h1 : x + y = 10) (h2 : y + z = 15) (h3 : x + z = 13) :
    x = 4 ∧ y = 6 ∧ z = 9 := by omega

example (a b : Int) (h1 : 2 * a + 3 * b = 7) (h2 : a - b = 1) :
    a = 2 ∧ b = 1 := by omega
```

### Modular Arithmetic with omega
```lean4
example (n : Nat) : n % 5 < 5 := by omega

example (a : Nat) (h : a % 3 = 2) : (a + 1) % 3 = 0 := by omega

example (x y : Nat) (hx : x % 4 = 1) (hy : y % 4 = 3) :
    (x + y) % 4 = 0 := by omega
```

## simp and simp_all Tactics

### Basic simp
```lean4
-- Simplifies using lemmas marked with @[simp]
example (n : Nat) : n + 0 = n := by simp

example (a b c : Nat) : a + (b + 0) + c = a + b + c := by simp

example (x : Nat) : x * 1 + 0 = x := by simp
```

### simp with Specific Lemmas
```lean4
theorem my_lemma (n : Nat) : n + n = 2 * n := by ring

example (x : Nat) : x + x + 0 = 2 * x := by
  simp [my_lemma]
```

### simp_all
```lean4
-- Uses hypotheses for simplification
example (h1 : a = b) (h2 : b = c) : a = c := by simp_all

example (x y : Nat) (h : x = 0) : x + y = y := by simp_all
```

### simp with Arithmetic
```lean4
example : (2 + 3) * 4 = 20 := by simp_arith

example (n : Nat) : 2 * (n + 3) = 2 * n + 6 := by simp [mul_add]
```

## by_cases Tactic

### Basic Case Split
```lean4
example (n : Nat) : n = 0 ∨ n > 0 := by
  by_cases h : n = 0
  · left; exact h
  · right; omega

theorem abs_eq (x : Int) : |x| = if x ≥ 0 then x else -x := by
  by_cases h : x ≥ 0 <;> simp [abs, h]
```

### Multiple Case Splits
```lean4
example (a b : Nat) : min a b = a ∨ min a b = b := by
  by_cases h : a ≤ b
  · left; simp [min, h]
  · right; simp [min, h]
```

### With Decidable Propositions
```lean4
example (p : Prop) [Decidable p] : p ∨ ¬p := by
  by_cases p <;> simp [*]
```

## constructor Tactic

### For Conjunctions
```lean4
example (a b : Prop) (ha : a) (hb : b) : a ∧ b := by
  constructor
  · exact ha
  · exact hb
```

### For Existential Statements
```lean4
example : ∃ n : Nat, n > 5 ∧ n < 10 := by
  constructor  -- Choose witness
  · exact 7
  constructor  -- Prove both properties
  · norm_num
  · norm_num
```

### For Iff Statements
```lean4
example (a b : Prop) : a ∧ b ↔ b ∧ a := by
  constructor
  · intro h
    constructor
    · exact h.2
    · exact h.1
  · intro h
    constructor
    · exact h.2
    · exact h.1
```

## Proof by Contradiction

### Using by_contra
```lean4
example (n : Nat) : ¬(n < n) := by
  by_contra h
  exact Nat.lt_irrefl n h
```

### Classical Logic
```lean4
open Classical

example (p : Prop) : p ∨ ¬p := by
  by_cases h : p
  · left; exact h
  · right; exact h
```

### Using absurd
```lean4
example (p q : Prop) (hp : p) (hnp : ¬p) : q := by
  exact absurd hp hnp
```

## Combined Tactics

### Complex Arithmetic Proofs
```lean4
example (a b c : Nat) (h1 : a + b = 20) (h2 : b + c = 30) (h3 : a + c = 28) :
    a = 9 ∧ b = 11 ∧ c = 19 := by
  constructor
  · omega
  constructor
  · omega
  · omega
```

### Conditional Proofs with Cases
```lean4
theorem min_le_left (a b : Nat) : min a b ≤ a := by
  simp [min]
  split_ifs
  · rfl
  · omega
```

### Induction with Tactics
```lean4
theorem sum_first_n (n : Nat) : 2 * (List.range n).sum = n * (n - 1) := by
  induction n with
  | zero => simp
  | succ n ih =>
    simp [List.range_succ, List.sum_append, ih]
    ring
```

## Tactic Combinators

### Focus on Specific Goals
```lean4
example (a b c d : Prop) (ha : a) (hb : b) (hc : c) (hd : d) :
    (a ∧ b) ∧ (c ∧ d) := by
  constructor <;> constructor <;> assumption
```

### Repeat Tactic
```lean4
example (a b c : Nat) : a + b + c = c + b + a := by
  simp [add_comm, add_assoc]
```

## Tips for Effective Tactic Use

1. **Start with `simp` or `omega`** for simple goals
2. **Use `by_cases` when you need to split on a condition**
3. **Apply `constructor` for goals with logical structure**
4. **Combine tactics with `<;>` to apply to all subgoals**
5. **Use `split_ifs` for conditional expressions**
6. **Remember `omega` handles linear arithmetic automatically**